name: Build_QT

on:
  workflow_dispatch:
    inputs:
      QT_VERSION:
        description: "QT version"
        required: true
        default: "v5.15.0"
      COMPILER:
        description: "Build compiler (msvc, gcc)"
        required: false
        default: "msvc"
        type: choice
        options:
        - msvc
        - gcc
      PUBLISH:
        description: "Publish result package in github"
        required: false
        default: "false"
        type: choice
        options:
        - true
        - false

env:
  QTVER: "${{ github.event.inputs.QT_VERSION }}"
  COMPILER: "${{ github.event.inputs.COMPILER }}"

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    env:
      vcvars_bat: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat'
      QT_CONF: 'qtbase/bin/qt.conf' # Extract the QT_BUILD_TYPE from this file
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # Replaced by secrets.REPO_TOKEN, if exists
      # Intermediate folders
      QT_SRC: 'qt'
      QT_DEPLOY: 'deploy'
      QT_LICENSE_FILE: 'LICENSE.QT-LICENSE-AGREEMENT'
      MAKE_TOOL: make

    steps:
    - uses: actions/checkout@v3

    - name: Select REPO_TOKEN (if exists)
      shell: pwsh
      run: |
        if ("${{ secrets.REPO_TOKEN }}") {
          echo "GITHUB_TOKEN=${{ secrets.REPO_TOKEN }}" >> $env:GITHUB_ENV
          echo "GITHUB_TOKEN set to <REPO_TOKEN>"
        } else {
          echo "No REPO_TOKEN secret, keep original GITHUB_TOKEN"
        }

    - name: Checkout QT ${{ env.QTVER }}
      uses: actions/checkout@v3
      with:
        repository: qt/qt5
        ref: ${{ env.QTVER }}
        #submodules: true
        path: ${{ env.QT_SRC }}

    - name: Checkout qtbase
      working-directory: ${{ env.QT_SRC }}
      run: |
        git submodule update --init qtbase

    # MS compiler on Windows only
    - name: Prepare MSVS environment
      if: ${{ contains( env.COMPILER, 'msvc') && runner.os == 'Windows' }}
      shell: pwsh
      run: |
        echo "MSVC environment by: ${{ env.vcvars_bat }}"
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" '/c "${{ env.vcvars_bat }}" 2> nul && set'
        if ($proc.ExitCode) {exit $proc.ExitCode}
        Get-Content $tempfile | foreach-object {
          $s = $_.Split("=",2)
          if ($s.Length -eq 2) {
            $n,$v = $s
            # Export new variables only
            if (-not $(Test-Path env:$n) -or $v -ne $(Get-Item env:$n).Value) {
              echo "$n=$v" >> $env:GITHUB_ENV
              echo "$n set to $v"
            }
          }
        }
        del $tempfile
        echo "MAKE_TOOL=nmake" >> $env:GITHUB_ENV
        echo "MAKE_TOOL set to nmake"

    - name: Install packages (linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get install libgles2-mesa-dev nuget

    - name: Configure QT
      shell: pwsh
      run: |
        $deploy_dir = New-Item -ItemType directory "${{ env.QT_DEPLOY }}"
        echo "Run QT configure to $deploy_dir..."
        cd ${{ env.QT_SRC }}
        ./configure -prefix $deploy_dir -nomake examples -nomake tests -opensource -confirm-license

    - name: Make QT
      working-directory: ${{ env.QT_SRC }}
      shell: pwsh
      run: |
        if (Test-Path CMakeLists.txt) {
          cmake --build . --parallel
        } else {
          echo "Run ${{ env.MAKE_TOOL }}..."
          ${{ env.MAKE_TOOL }}
        }

    - name: Install QT
      working-directory: ${{ env.QT_SRC }}
      shell: pwsh
      run: |
        if (Test-Path CMakeLists.txt) {
          cmake --install .
        } else {
          echo "Run ${{ env.MAKE_TOOL }} install..."
          ${{ env.MAKE_TOOL }} install
        }

    - name: Select NUPKG_VER, NUPKG_VER_SUFFIX and NUPKG_ID
      working-directory: ${{ env.QT_SRC }}
      shell: pwsh
      run: |
        # Translate QTVER
        $NUPKG_VER = $(git describe).TrimStart("v")
        echo "NUPKG_VER=$NUPKG_VER" >> $env:GITHUB_ENV
        echo "NUPKG_VER set to $NUPKG_VER"

        $NUPKG_ID = "QT-${{ runner.os }}"
        $NUPKG_VER_SUFFIX = ""
        if ("${{ env.VisualStudioVersion }}") {
          echo "  VisualStudioVersion is ${{ env.VisualStudioVersion }}"
        #  $NUPKG_VER_SUFFIX = "${NUPKG_VER_SUFFIX}msvs-v${{ env.VisualStudioVersion }}"
        }

        echo "NUPKG_ID=$NUPKG_ID" >> $env:GITHUB_ENV
        echo "NUPKG_ID set to $NUPKG_ID"
        echo "NUPKG_VER_SUFFIX=$NUPKG_VER_SUFFIX" >> $env:GITHUB_ENV
        echo "NUPKG_VER_SUFFIX set to $NUPKG_VER_SUFFIX"

    - name: Create NuGet package
      shell: pwsh
      run: |
        $PKG_LICENSE_FILE = "${{ env.QT_LICENSE_FILE }}".Replace(".", "_")
        Copy-Item ${{ env.QT_SRC }}/${{ env.QT_LICENSE_FILE }} ${{ env.QT_DEPLOY }}/$PKG_LICENSE_FILE
        $SUFFIX = ""
        if ("${{ env.NUPKG_VER_SUFFIX }}") {$SUFFIX = ("-Suffix", "${{ env.NUPKG_VER_SUFFIX }}")}

        echo "Packing ${{ env.QT_DEPLOY }}, ID ${{ env.NUPKG_ID }}, Version ${{ env.NUPKG_VER }}"
        nuget pack -BasePath ${{ env.QT_DEPLOY }} -Version ${{ env.NUPKG_VER }} $SUFFIX `
            -Properties "id=${{ env.NUPKG_ID }};license=$PKG_LICENSE_FILE"
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        # Obtain package name
        $package_name = $(Get-Item *.nupkg).Name
        echo "NUPKG_NAME=$package_name" >> $env:GITHUB_ENV
        echo "NUPKG_NAME set to $package_name"

    - name: Publish NuGet package
      if: github.event.inputs.PUBLISH == 'true'
      shell: pwsh
      run: |
        # See https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry
        echo "# Authenticate"
        $opt = ""
        # Password encryption is not supported on Linux
        if ('${{ runner.os }}' -eq 'Linux') {
          $opt="--store-password-in-clear-text"
        }
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ env.GITHUB_TOKEN }} $opt `
            --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        echo "# Publish"
        dotnet nuget push "${{ env.NUPKG_NAME }}" --api-key ${{ env.GITHUB_TOKEN }} --source "github"

    - name: Obtain NuGet package name
      if: github.event.inputs.PUBLISH != 'true'
      shell: pwsh
      run: |
        $package_name = $(Get-Item *.nupkg).Name
        echo "NUPKG_NAME=$package_name" >> $env:GITHUB_ENV
        echo "NUPKG_NAME set to $package_name"

    - uses: actions/upload-artifact@v3
      if: github.event.inputs.PUBLISH != 'true'
      with:
        name: NuGet-package-${{ runner.os }}
        path: ${{ env.NUPKG_NAME }}
