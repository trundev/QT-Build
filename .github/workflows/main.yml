name: Build QT

on: [push]

env:
  QTVER: wip/qt3dstudio/2.1   # Change this to the QT version to build

jobs:
  build:
    runs-on: windows-latest

    env:
      vcvars_bat: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
      QT_CONF: 'qtbase/bin/qt.conf' # Extract the QT_BUILD_TYPE from this file
      #QT_BUILD_TYPE: # To be extracted from qt.conf / TargetSpec, like win32-msvc, win32-g++, etc.

    steps:
    - uses: actions/checkout@v1
      with:
        repository: qt/qt5
        ref: ${{ env.QTVER }}
        #submodules: true
        path: QT-Build  # ${{ env.GITHUB_WORKSPACE }}

    - name: Checkout qtbase
      run: |
        git submodule update --init qtbase

    - name: Prepare MSVS environment
      run: |
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        Get-Content $tempfile | foreach-object {
          $s = $_.Split("=",2)
          if ($s.Length -eq 2) {
            $n,$v = $s
            # Export new variables only
            if (-not $(Test-Path env:$n) -or $v -ne $(Get-Item env:$n).Value) {
              echo "::set-env name=$n::$v"
            }
          }
        }
        del $tempfile

    - name: Configure QT
      run: |
        $deploy_dir = mkdir -Force "$PWD\..\QT"
        echo "Run QT configure to $deploy_dir..."
        .\configure.bat -prefix $deploy_dir -nomake examples -nomake tests -opensource -confirm-license

    - name: Select QTVER_REF, QT_BUILD_TYPE/QT_BUILD_TYPE_EXT and ASSET_POSTFIX
      run: |
        # Translate QTVER
        $QTVER_REF = $(git describe)
        echo "::set-env name=QTVER_REF::$QTVER_REF"
        echo "QTVER_REF set to $QTVER_REF"

        # Obtain build type (TargetSpec)
        $QT_BUILD_TYPE = ""
        if ( Test-Path ${{ env.QT_CONF }} ) {
          Get-Content ${{ env.QT_CONF }} | foreach-object { $n,$v = $_.Split("=", 2)
            if ($n -eq "TargetSpec") { $QT_BUILD_TYPE = $v; echo "::set-env name=QT_BUILD_TYPE::$v" }
          }
        }
        echo "QT_BUILD_TYPE set to $QT_BUILD_TYPE"

        # Append Visual Studio version
        $QT_BUILD_TYPE_EXT = $QT_BUILD_TYPE
        if ("${{ env.VisualStudioVersion }}") {
          echo "  VisualStudioVersion is ${{ env.VisualStudioVersion }}"
          $QT_BUILD_TYPE_EXT = "${QT_BUILD_TYPE_EXT}_v${{ env.VisualStudioVersion }}"
          echo "QT_BUILD_TYPE_EXT set to $QT_BUILD_TYPE_EXT"
        }

        # QT asset name postfix
        $ASSET_POSTFIX = "$QTVER_REF-$QT_BUILD_TYPE_EXT"
        echo "::set-env name=ASSET_POSTFIX::$ASSET_POSTFIX"
        echo "ASSET_POSTFIX set to $ASSET_POSTFIX"

    - name: Make QT
      run: |
        echo "Run nmake..."
        nmake

    - name: Install QT
      run: |
        echo "Run nmake install..."
        nmake install

    - name: ZIP Build Result
      run: |
        Add-Type -assembly "system.io.compression.filesystem"
        [io.compression.zipfile]::CreateFromDirectory("$PWD\..\QT", "${{ runner.temp }}/QT-asset.zip")

        Get-Item ${{ runner.temp }}/QT-asset.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.QTVER_REF }}
        release_name: Build of ${{ env.QTVER_REF }}, type ${{ env.QT_BUILD_TYPE }}
        body: |
          Build of [qt/qt5](https://github.com/qt/qt5) repository, checkout ref `${{ env.QTVER }}`, build type `${{ env.QT_BUILD_TYPE_EXT }}`
          See: https://github.com/qt/qt5/tree/v5.13.0
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
        asset_path: ${{ runner.temp }}/QT-asset.zip
        asset_name: QT-${{ env.ASSET_POSTFIX }}.zip
        asset_content_type: application/zip
