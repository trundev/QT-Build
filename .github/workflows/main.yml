name: Build_QT

on:
  release:
    types: [published, prereleased]

env:
  QTVER: ${{ github.ref }}  # Pushed tag-name
  BADGE_PENDING: '[![Build Pending](https://rawgithub.com/badges/badger/master/static/travis_pending.svg)](#)'
  BADGE_PASSED: '[![Build Passing](https://rawgithub.com/badges/badger/master/static/travis_passing.svg)](#)'
  BADGE_FAILED: '[![Build Failing](https://rawgithub.com/badges/badger/master/static/travis_failing.svg)](#)'
  BADGE_POSTFIX: ' [GitHub action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n'

jobs:
  build:
    runs-on: windows-latest

    env:
      vcvars_bat: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
      QT_CONF: 'qtbase/bin/qt.conf' # Extract the QT_BUILD_TYPE from this file
      #QT_BUILD_TYPE: # To be extracted from qt.conf / TargetSpec, like win32-msvc, win32-g++, etc.

    steps:
    - name: Obtain release upload URL
      id: get_upload_url
      uses: actions/github-script@0.4.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          tag = '${{ env.QTVER }}'.replace(/^refs\/tags\//, '')
          console.log('Get release by tag: ' + tag)
          result = await github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: tag
          })
          release_id = result.data.id
          console.log('::set-env name=RELEASE_ID::' + release_id)
          console.log('RELEASE_ID set to ' + release_id)

          release_body = result.data.body
          github.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release_id,
            name: 'Pending build of ' + tag,
            body: '${{ env.BADGE_PENDING }}${{ env.BADGE_POSTFIX }}' + release_body,
          })

          upload_url = result.data.upload_url
          console.log('::set-env name=ASSET_UPLOAD_URL::' + upload_url)
          console.log('ASSET_UPLOAD_URL set to ' + upload_url)
          return upload_url

    - uses: actions/checkout@v1
      with:
        repository: qt/qt5
        ref: ${{ env.QTVER }}
        #submodules: true
        path: QT-Build  # ${{ env.GITHUB_WORKSPACE }}

    - name: Checkout qtbase
      run: |
        git submodule update --init qtbase

    - name: Prepare MSVS environment
      run: |
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        Get-Content $tempfile | foreach-object {
          $s = $_.Split("=",2)
          if ($s.Length -eq 2) {
            $n,$v = $s
            # Export new variables only
            if (-not $(Test-Path env:$n) -or $v -ne $(Get-Item env:$n).Value) {
              echo "::set-env name=$n::$v"
            }
          }
        }
        del $tempfile

    - name: Configure QT
      run: |
        $deploy_dir = mkdir -Force "$PWD\..\QT"
        echo "Run QT configure to $deploy_dir..."
        .\configure.bat -prefix $deploy_dir -nomake examples -nomake tests -opensource -confirm-license

    - name: Select QTVER_REF, QT_BUILD_TYPE/QT_BUILD_TYPE_EXT and ASSET_POSTFIX
      run: |
        # Translate QTVER
        $QTVER_REF = $(git describe)
        echo "::set-env name=QTVER_REF::$QTVER_REF"
        echo "QTVER_REF set to $QTVER_REF"

        # Obtain build type (TargetSpec)
        $QT_BUILD_TYPE = ""
        if ( Test-Path ${{ env.QT_CONF }} ) {
          Get-Content ${{ env.QT_CONF }} | foreach-object { $n,$v = $_.Split("=", 2)
            if ($n -eq "TargetSpec") { $QT_BUILD_TYPE = $v; echo "::set-env name=QT_BUILD_TYPE::$v" }
          }
        }
        echo "QT_BUILD_TYPE set to $QT_BUILD_TYPE"

        # Append Visual Studio version
        $QT_BUILD_TYPE_EXT = $QT_BUILD_TYPE
        if ("${{ env.VisualStudioVersion }}") {
          echo "  VisualStudioVersion is ${{ env.VisualStudioVersion }}"
          $QT_BUILD_TYPE_EXT = "${QT_BUILD_TYPE_EXT}_v${{ env.VisualStudioVersion }}"
          echo "QT_BUILD_TYPE_EXT set to $QT_BUILD_TYPE_EXT"
        }

        # QT asset name postfix
        $ASSET_POSTFIX = "$QTVER_REF-$QT_BUILD_TYPE_EXT"
        echo "::set-env name=ASSET_POSTFIX::$ASSET_POSTFIX"
        echo "ASSET_POSTFIX set to $ASSET_POSTFIX"

    - name: Runner test commands
      id: test_commands
      run: |
        echo "PS env:QTVER=$env:QTVER, env:QTVER_REF=$env:QTVER_REF"
        echo "Runner env.QTVER=${{ env.QTVER }}, env.QTVER_REF=${{ env.QTVER_REF }}"
        echo 'get_upload_url result: ${{ steps.get_upload_url.outputs.result }}'
        echo "Environment Variables"
        Get-ChildItem env:
        echo "::log-command parameter1=test-log-parameter1,parameter2=test-log-parameter2::test-log-command value"
        echo "::set-output name=test_out_var::test_out_var-value"
        echo "::set-env name=test_env_var::test_env_var-value"

    - name: Browse state
      run: |
        echo "Output variable from previous step"
        echo "test_var: ${{ steps.test_commands.outputs.test_out_var }}"
        echo ""
        echo "Environment Variables"
        Get-ChildItem env:

    - name: Export job enviroment
      env:
        ENV_JSON: '${{ toJson(env) }}'
      run: |
        Get-Content env:ENV_JSON > ${{ runner.temp }}/env.json

    - name: Upload environment artifact
      uses: actions/upload-artifact@v1
      with:
        name: build-env
        path: ${{ runner.temp }}/env.json

  publish:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Download environment artifact
      uses: actions/download-artifact@v1
      with:
        name: build-env
        path: ${{ runner.temp }}

    - name: Import job enviroment
      run: |
        $build_env = Get-Content ${{ runner.temp }}/env.json | ConvertFrom-Json

        # Output environment vaiables needed by next steps
        ForEach ($n in "QTVER", "QTVER_REF", "QT_BUILD_TYPE", "QT_BUILD_TYPE_EXT", "RELEASE_ID", "ASSET_UPLOAD_URL") {
          echo "::set-env name=$n::$($build_env.$n)"
        }

    - name: Browse state
      id: browse_state
      run: |
        dir . -D 2
        echo "Environment Variables"
        Get-ChildItem env:

    - name: Create Release
      id: create_release
      if: env.ASSET_UPLOAD_URL == ''
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.QTVER_REF }}
        release_name: Build of ${{ env.QTVER_REF }}, type ${{ env.QT_BUILD_TYPE }}
        body: |
          Build of [qt/qt5](https://github.com/qt/qt5) repository, checkout ref `${{ env.QTVER }}`, build type `${{ env.QT_BUILD_TYPE_EXT }}`
          See: https://github.com/qt/qt5/tree/v5.13.0
        draft: false
        prerelease: true

    - name: Check upload URL
      uses: actions/github-script@0.4.0
      if: always()
      env:
        BROWSE_STATUS: ${{ steps.browse_state.status }}
        CREATE_STATUS: ${{ steps.create_release.status }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Job status experiments
          console.log('env.BROWSE_STATUS: ${{ env.BROWSE_STATUS}}')
          console.log('env.CREATE_STATUS: ${{ env.CREATE_STATUS}}')

          release_id = '${{ env.RELEASE_ID }}'
          upload_url = '${{ env.ASSET_UPLOAD_URL }}'
          if (!upload_url) {
            release_id = '${{ steps.create_release.outputs.id }}'
            upload_url = '${{ steps.create_release.outputs.upload_url }}'
          }
          console.log('release_id: ' + release_id)
          console.log('upload_url: ' + upload_url)

          result = await github.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release_id
          })

          // Edit the release
          release_name = result.data.name
          release_body = result.data.body
          prerelease = result.data.prerelease

          release_name = 'Build of ${{ env.QTVER_REF }}, type ${{ env.QT_BUILD_TYPE }}'
          badge = '${{ env.CREATE_STATUS }}' == 'success' ? '${{ env.BADGE_PASSED }}' : '${{ env.BADGE_FAILED }}'
          if ('${{ env.CREATE_STATUS }}' == 'success') prerelease = false
          release_body = release_body.replace('${{ env.BADGE_PENDING }}', badge)
          github.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release_id,
            name: release_name,
            body: release_body,
            prerelease: prerelease,
          })

          return result
