name: Build QT

on: [push]

env:
  QTVER: wip/qt3dstudio/2.1   # Change this to the QT version to build

jobs:
  build:
    runs-on: windows-latest

    env:
      vcvars_bat: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
      QT_CONF: 'qtbase/bin/qt.conf' # Extract the QT_BUILD_TYPE from this file
      #QT_BUILD_TYPE: # To be extracted from qt.conf / TargetSpec, like win32-msvc, win32-g++, etc.

    steps:
    - uses: actions/checkout@v1
      with:
        repository: qt/qt5
        ref: ${{ env.QTVER }}
        #submodules: true
        path: QT-Build  # ${{ env.GITHUB_WORKSPACE }}

    - name: Update QTVER
      run: |
        echo "::set-env name=QTVER-ORIG::${{ env.QTVER }}"
        echo "::set-env name=QTVER::$(git describe)"
        echo "PS env:QTVER=$env:QTVER"
        echo "Runner env.QTVER=${{ env.QTVER }}"

    - name: Checkout qtbase
      run: |
        git submodule update --init qtbase

    - name: Prepare MSVS environment
      run: |
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        Get-Content $tempfile | foreach-object {
          $s = $_.Split("=",2)
          if ($s.Length -eq 2) {
            $n,$v = $s
            # Export new variables only
            if (-not $(Test-Path env:$n) -or $v -ne $(Get-Item env:$n).Value) {
              echo "::set-env name=$n::$v"
            }
          }
        }
        del $tempfile

    - name: Configure QT
      run: |
        $deploy_dir = mkdir -Force "$PWD\..\QT"
        echo "Run QT configure to $deploy_dir..."
        .\configure.bat -prefix $deploy_dir -nomake examples -nomake tests -opensource -confirm-license
        if ($LastExitCode) {exit $LastExitCode}

        if ( Test-Path ${{ env.QT_CONF }} ) {
          Get-Content ${{ env.QT_CONF }} | foreach-object { $n,$v = $_.Split("=", 2)
            if ($n -eq "TargetSpec") { echo "::set-env name=QT_BUILD_TYPE::$v"; break }
          }
        }

    - name: Runner test commands
      id: test_commands
      run: |
        echo "PS env:QTVER=$env:QTVER"
        echo "Runner env.QTVER=${{ env.QTVER }}"
        echo "Environment Variables"
        Get-Item env:
        echo "::log-command parameter1=test-log-parameter1,parameter2=test-log-parameter2::test-log-command value"
        echo "::set-output name=test_out_var::test_out_var-value"
        echo "::set-env name=test_env_var::test_env_var-value"

    - name: Browse state
      run: |
        echo "Output variable from previous step"
        echo "test_var: ${{ steps.test_commands.outputs.test_out_var }}"
        echo ""
        echo "Environment Variables"
        Get-Item env:

    - name: Export job enviroment
      env:
        ENV_JSON: '${{ toJson(env) }}'
      run: |
        Get-Content env:ENV_JSON > ../env.json

    - name: Upload environment artifact
      uses: actions/upload-artifact@v1
      with:
        name: build-env
        path: ../env.json

  publish:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Download environment artifact
      uses: actions/download-artifact@v1
      with:
        name: build-env
        path: .

    - name: Browse state
      run: |
        $build_env = Get-Content .\env.json | ConvertFrom-Json

        # Export environment vaiables needed by next steps
        ForEach ($n in "QTVER", "QT_BUILD_TYPE", "QTVER-ORIG") {
          echo "::set-env name=$n::$($build_env.$n)"
        }

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.QTVER }}
        release_name: Build of ${{ env.QTVER }}, build type ${{ env.QT_BUILD_TYPE }}
        body: |
          Build of [qt/qt5](https://github.com/qt/qt5) repository, ref `${{ env.QTVER-ORIG }}`, build type `${{ env.QT_BUILD_TYPE }}`
          See: https://github.com/qt/qt5/tree/v5.13.0
        draft: false
        prerelease: true
