name: Build QT

on: [push]

jobs:
  build:
    runs-on: windows-latest

    env:
      QTVER: v5.11.2  # Change this to the QT version to build
      vcvars_bat: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

    steps:
    - uses: actions/checkout@v1
      with:
        repository: qt/qt5
        ref: ${{ env.QTVER }}
        #submodules: true
        path: QT-Build  # ${{ env.GITHUB_WORKSPACE }}

    - name: Checkout qtbase
      run: |
        git submodule update --init qtbase

    - name: Configure QT
      run: |
        echo "Prepare VS2019 environment..."
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        get-content $tempfile | foreach-object {$n,$v = $_.Split("=",2); set-item -path "env:\$($n)" -value $v}
        del $tempfile

        $deploy_dir = mkdir -Force "$PWD\..\QT"
        echo "" "Run QT configure to $deploy_dir..."
        .\configure.bat -prefix $deploy_dir -nomake examples -nomake tests -opensource -confirm-license

    - name: Make QT
      run: |
        echo "Prepare VS2019 environment..."
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        get-content $tempfile | foreach-object {$n,$v = $_.Split("=",2); set-item -path "env:\$($n)" -value $v}
        del $tempfile

        echo "" "Run nmake..."
        nmake

    - name: Install QT
      run: |
        echo "Prepare VS2019 environment..."
        $tempfile = [IO.Path]::GetTempFileName()
        $proc = start-process -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tempfile "$env:ComSpec" "/c $env:vcvars_bat 2> nul && set"
        if ($proc.ExitCode) {exit $proc.ExitCode}
        get-content $tempfile | foreach-object {$n,$v = $_.Split("=",2); set-item -path "env:\$($n)" -value $v}
        del $tempfile

        echo "" "Run nmake install..."
        nmake install

    - name: ZIP Result
      run: |
        Add-Type -assembly "system.io.compression.filesystem"
        [io.compression.zipfile]::CreateFromDirectory("$PWD\..\QT", "$PWD\QT-${{ env.QTVER }}.zip")

        Get-Item QT-${{ env.QTVER }}.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Build ${{ env.QTVER }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
        asset_path: ./QT-${{ env.QTVER }}.zip
        asset_name: QT-${{ env.QTVER }}.zip
        asset_content_type: application/zip
